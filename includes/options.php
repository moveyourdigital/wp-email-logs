<?php

/**
 * Generated by the WordPress Option Page generator
 * at http://jeremyhixon.com/wp-tools/option-page/
 */
namespace EmailNotifications;

/**
 *
 * @since 0.1.0
 */
class AdminOptions {

	/**
	 *
	 * @since 0.1.0
	 */
	private $options;

	/**
	 *
	 * @uses admin_menu
	 * @uses admin_init
	 * @uses email_notifications_user_options_section_info
	 * @since 0.1.0
	 */
	public function __construct() {
		add_action( 'admin_menu', array( $this, 'add_plugin_page' ) );
		add_action( 'admin_init', array( $this, 'page_init' ) );
		add_action( 'email_notifications_user_options_section_info', array( $this, 'email_user_variables' ) );
	}

	/**
	 *
	 * @since 0.1.0
	 */
	public function add_plugin_page() {
		add_options_page(
			__( 'Email Notifications', 'email-notifications' ),
			__( 'Email Notifications', 'email-notifications' ),
			apply_filters( 'email_notifications_options_capability', 'manage_options' ),
			'email-notifications',
			array( $this, 'create_admin_page' )
		);
	}

	/**
	 *
	 * @since 0.1.0
	 */
	public function create_admin_page() {
		$this->options = get_option( 'email_notifications' ); ?>

		<div class="wrap">
			<h2><?php _e( 'Email Notifications', 'email-notifications' ) ?></h2>
			<?php settings_errors(); ?>

			<form method="post" action="options.php">
				<?php
					settings_fields( 'notifications' );
					do_settings_sections( 'email-notifications-admin' );
					submit_button();
				?>
			</form>
		</div>
	<?php }

	/**
	 *
	 * @uses email_notifications_before_user_options
	 * @uses email_notifications_after_user_options
	 * @since 0.1.0
	 */
	public function page_init() {
		register_setting(
			'notifications',
			'email_notifications',
			array( $this, 'sanitize' )
		);

		do_action( 'email_notifications_before_user_options' );

		add_settings_section(
			'email_notifications_setting_section', // id
			__( 'User notifications', 'email-notifications' ), // title
			array( $this, 'email_notifications_section_info' ), // callback
			'email-notifications-admin' // page
		);

		add_settings_field(
			'when_a_user_is_added', // id
			__( 'When a user is added', 'email-notifications' ), // title
			array( $this, 'when_a_user_is_added_callback' ), // callback
			'email-notifications-admin', // page
			'email_notifications_setting_section' // section
		);

		add_settings_field(
			'when_password_reset', // id
			__( 'User resets password', 'email-notifications' ), // title
			array( $this, 'when_password_reset_callback' ), // callback
			'email-notifications-admin', // page
			'email_notifications_setting_section' // section
		);

		add_settings_field(
			'when_password_changes', // id
			__( 'Notify user that password was changed', 'email-notifications' ), // title
			array( $this, 'when_password_changes_callback' ), // callback
			'email-notifications-admin', // page
			'email_notifications_setting_section' // section
		);

		add_settings_field(
			'when_email_changes', // id
			__( 'Notify user that email was changed', 'email-notifications' ), // title
			array( $this, 'when_email_changes_callback' ), // callback
			'email-notifications-admin', // page
			'email_notifications_setting_section' // section
		);

		do_action( 'email_notifications_after_user_options' );
	}

	/**
	 *
	 * @uses save_email_notifications_options
	 * @since 0.1.0
	 */
	public function sanitize() {
		$sanitary_values = array();

		if ( isset( $_POST['when_a_user_is_added_subject'] ) ) {
			$sanitary_values['when_a_user_is_added_subject'] = $_POST['when_a_user_is_added_subject'];
		}

		if ( isset( $_POST['when_a_user_is_added'] ) ) {
			$sanitary_values['when_a_user_is_added'] = wpautop( $_POST['when_a_user_is_added'] );
		}

		if ( isset( $_POST['when_password_reset_subject'] ) ) {
			$sanitary_values['when_password_reset_subject'] = $_POST['when_password_reset_subject'];
		}

		if ( isset( $_POST['when_password_reset'] ) ) {
			$sanitary_values['when_password_reset'] = wpautop( $_POST['when_password_reset'] );
		}

		if ( isset( $_POST['when_password_changes_subject'] ) ) {
			$sanitary_values['when_password_changes_subject'] = $_POST['when_password_changes_subject'];
		}

		if ( isset( $_POST['when_password_changes'] ) ) {
			$sanitary_values['when_password_changes'] = wpautop( $_POST['when_password_changes'] );
		}

		if ( isset( $_POST['when_email_changes_subject'] ) ) {
			$sanitary_values['when_email_changes_subject'] = $_POST['when_email_changes_subject'];
		}

		if ( isset( $_POST['when_email_changes'] ) ) {
			$sanitary_values['when_email_changes'] = wpautop( $_POST['when_email_changes'] );
		}

		return apply_filters( 'save_email_notifications_options', $sanitary_values );
	}

	/**
	 *
	 * @uses email_notifications_user_options_section_info
	 * @since 0.1.0
	 */
	public function email_notifications_section_info() {
		do_action( 'email_notifications_user_options_section_info' );
	}

	/**
	 *
	 * @uses wp_new_user_notification_email
	 * @uses default_user_registration_email
	 * @uses default_user_registration_email_subject
	 *
	 * @since 0.1.0
	 */
	public function when_a_user_is_added_callback() {
		$default_text = apply_filters( 'default_user_registration_email_subject', __( '[%s] Password Reset', 'default' ) );
?>
<p>
	<input name="when_a_user_is_added_subject" type="text" id="when-a-user-is-added-subject" placeholder="<?php _e( 'Subject', 'email-notifications' ) ?>" class="regular-text" value="<?php echo esc_attr(
		isset( $this->options['when_a_user_is_added_subject'] )
		? $this->options['when_a_user_is_added_subject']
		: $default_text ) ?>">
</p>
<p class="description"><?php _e( 'If you use <code>%s</code> is gets replaced by the <i>Site title</i> set in <a href=options-general.php>general options</a>.', 'email-notifications' ) ?></p>
<br />
<p>
<?php
		$default_text = apply_filters( 'default_user_registration_email', $this->default_user_registration_email() );

		wp_editor( isset( $this->options['when_a_user_is_added'] )
			? stripslashes( html_entity_decode( $this->options['when_a_user_is_added'] ) )
			: $default_text, 'when_a_user_is_added');
?>
</p>

<?php
	}

	/**
	 *
	 * @uses default_user_password_reset_subject
	 * @uses default_user_password_reset_email
	 *
	 * @since 0.1.0
	 */
	public function when_password_reset_callback() {
		$default_text = apply_filters( 'default_user_password_reset_subject', __ ( '[%s] Password Reset', 'default' ) );
?>
<p>
	<input name="when_password_reset_subject" type="text" id="when-password-reset-subject" placeholder="<?php _e( 'Subject', 'email-notifications' ) ?>" class="regular-text" value="<?php echo esc_attr(
		isset( $this->options['when_password_reset_subject'] )
		? $this->options['when_password_reset_subject']
		: $default_text ) ?>">
</p>
<p class="description"><?php _e( 'If you use <code>%s</code> is gets replaced by the <i>Site title</i> set in <a href=options-general.php>general options</a>.', 'email-notifications' ) ?></p>
<br />
<p>
<?php
		$default_text = apply_filters( 'default_user_password_reset_email', $this->default_user_password_reset_email() );

		wp_editor( isset( $this->options['when_password_reset'] )
			? stripslashes( html_entity_decode( $this->options['when_password_reset'] ) )
			: $default_text, 'when_password_reset');
?>
</p>
<?php
	}

	/**
	 *
	 * @uses password_change_email
	 * @uses default_password_change_subject
	 * @uses default_password_change_email
	 *
	 * @since 0.1.0
	 */
	public function when_password_changes_callback() {
		$default_text = apply_filters( 'default_password_change_subject', __ ( '[%s] Password Changed', 'default' ) );
?>
<p>
	<input name="when_password_changes_subject" type="text" id="when-password-reset-subject" placeholder="<?php _e( 'Subject', 'email-notifications' ) ?>" class="regular-text" value="<?php echo esc_attr(
		isset( $this->options['when_password_changes_subject'] )
		? $this->options['when_password_changes_subject']
		: $default_text ) ?>">
</p>
<p class="description"><?php _e( 'If you use <code>%s</code> is gets replaced by the <i>Site title</i> set in <a href=options-general.php>general options</a>.', 'email-notifications' ) ?></p>
<br />
<p>
<?php
		$default_text = apply_filters( 'default_password_change_email', $this->default_password_change_email() );

		wp_editor( isset( $this->options['when_password_changes'] )
			? stripslashes( html_entity_decode( $this->options['when_password_changes'] ) )
			: $default_text, 'when_password_changes');
?>
</p>
<?php
	}

	/**
	 *
	 * @uses email_change_email
	 * @uses default_user_password_reset_subject
	 * @uses default_email_change_email
	 *
	 * @since 0.1.0
	 */
	public function when_email_changes_callback() {
		$default_text = apply_filters( 'default_email_change_subject', __ ( '[%s] Email Changed', 'default' ) );
?>
<p>
	<input name="when_email_changes_subject" type="text" id="when-password-reset-subject" placeholder="<?php _e( 'Subject', 'email-notifications' ) ?>" class="regular-text" value="<?php echo esc_attr(
		isset( $this->options['when_email_changes_subject'] )
		? $this->options['when_email_changes_subject']
		: $default_text ) ?>">
</p>
<p class="description"><?php _e( 'If you use <code>%s</code> is gets replaced by the <i>Site title</i> set in <a href=options-general.php>general options</a>.', 'email-notifications' ) ?></p>
<br />
<p>
<?php
		$default_text = apply_filters( 'default_email_change_email', $this->default_email_change_email() );

		wp_editor( isset( $this->options['when_email_changes'] )
			? stripslashes( html_entity_decode( $this->options['when_email_changes'] ) )
			: $default_text, 'when_email_changes');
?>
</p>
<?php
	}

	/**
	 *
	 * @uses email_notifications_user_emails_variables
	 * @since 0.1.0
	 */
	public function email_user_variables() {

		$variables = apply_filters( 'email_notifications_user_emails_variables', [
			'site_url' => sprintf( _x( '%s shows site Url.', '%site_url%', 'email-notifications' ), '<code>%site_url%</code>' ),
			'site_title' => sprintf( _x( '%s prints the Site Title.', '%site_title%', 'email-notifications' ), '<code>%site_title%</code>' ),
			'user_login' => sprintf( _x( '%s displays user login information.', '%user_login%', 'email-notifications' ), '<code>%user_login%</code>' ),
			'user_display_name' => sprintf( _x( '%s displays user name in human readable format.', '%user_login%', 'email-notifications' ), '<code>%user_display_name%</code>' ),
			'login_url' => sprintf( _x( '%s shows the login page link.', '%login_url%', 'email-notifications' ), '<code>%login_url%</code>' ),
			'user_email' => sprintf( _x( '%s the registered user email address.', '%user_email%', 'email-notifications' ), '<code>%user_email%</code>' ),
			'user_activation_link' => sprintf( _x( '%s the activation link which will be rendered as a link tag.', '%user_activation_link%', 'email-notifications' ), '<code>%user_activation_link%</code>' ),
		]);

		if ( empty( $variables ) ) return;
?>
<p>
	<?php _e( 'The following settings are used to send automatic emails during common WordPress tasks such as user activation or password reset. You can use shortcodes in your email body content which will be replaced by actual values. The list of available shortcodes are:', 'email-notifications' ) ?>
	<ul>
		<?php foreach ( $variables as $variable => $label ) : ?>
		<li id="user-variable-<?php echo $variable ?>">
			<?php echo $label ?>
		</li>
		<?php endforeach; ?>
	</ul>
</p>
<?php
	}

	/**
	 * Copied from wp-includes/pluggable.php
	 * Must always be in sync.
	 *
	 * @since 0.1.0
	 */
	public function default_user_registration_email() {
		$message  = sprintf( __( 'Username: %s', 'default' ), '%user_login%' ) . "\r\n\r\n";
		$message .= __( 'To set your password, visit the following address:', 'default' ) . "\r\n\r\n";
		$message .= '%user_activation_link%' . "\r\n\r\n";
		$message .= '%login_url%' . "\r\n";

		return $message;
	}

	/**
	 * Copied from wp-login.php
	 * Must always be in sync.
	 *
	 * @since 0.1.0
	 */
	public function default_user_password_reset_email() {

		$message = __( 'Someone has requested a password reset for the following account:', 'default' ) . "\r\n\r\n";
		/* translators: %s: Site name. */
		$message .= __( 'Site Name: %site_title%', 'default' ) . "\r\n\r\n";
		/* translators: %s: User login. */
		$message .= __( 'Username: %user_login%', 'default' ) . "\r\n\r\n";
		$message .= __( 'If this was a mistake, just ignore this email and nothing will happen.', 'default' ) . "\r\n\r\n";
		$message .= __( 'To reset your password, visit the following address:', 'default' ) . "\r\n\r\n";
		$message .= "%user_activation_link%" . "\r\n";

		return $message;
	}

	/**
	 * Copied from wp-login.php
	 * Must always be in sync.
	 *
	 * @since 0.1.0
	 */
	public function default_password_change_email() {

		$default = __( 'Hi ###USERNAME###,

This notice confirms that your password was changed on ###SITENAME###.

If you did not change your password, please contact the Site Administrator at
###ADMIN_EMAIL###

This email has been sent to ###EMAIL###

Regards,
All at ###SITENAME###
###SITEURL###' );

		return $this->replace_replacers( $default );

	}

	/**
	 * Copied from wp-login.php
	 * Must always be in sync.
	 *
	 * @since 0.1.0
	 */
	public function default_email_change_email() {

		$default = __( 'Hi ###USERNAME###,

This notice confirms that your email address on ###SITENAME### was changed to ###NEW_EMAIL###.

If you did not change your email, please contact the Site Administrator at
###ADMIN_EMAIL###

This email has been sent to ###EMAIL###

Regards,
All at ###SITENAME###
###SITEURL###' );

		return $this->replace_replacers( $default );

	}

	/**
	 *
	 */
	private function replace_replacers( $default ) {
		return str_replace( [
			'###USERNAME###',
			'###ADMIN_EMAIL###',
			'###EMAIL###',
			'###NEW_EMAIL###',
			'###SITENAME###',
			'###SITEURL###',
		], [
			'%user_login%',
			'%admin_email%',
			'%user_email%',
			'%user_email%',
			'%site_name%',
			'%site_url%',
		], $default );
	}

}
